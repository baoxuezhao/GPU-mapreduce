// MapReduce Inverted Index example using CUDA
// Syntax: invertedindex path-of-data-dir
// (1) assume each host has four processors, each corresponds
//     to a GPU, and read one parts of the files in the local dir
// (2) parse into words separated by whitespace
// (3) count occurrence of each word in all files
// (4) print top 10 words

#include "/usr/local/mpich2-1.5/include/mpi.h"
#include <cuda.h>
#include <iostream>
#include <cstdio>
#include <cstdlib>
#include <cstring>
#include <sys/time.h>
#include "sys/stat.h"
#include "mapreduce.h"
#include "keyvalue.h"

#include <thrust/device_ptr.h>
#include <thrust/host_vector.h>
#include <thrust/device_vector.h>
#include <thrust/sort.h>
#include <thrust/copy.h>
#include <thrust/count.h>
#include <thrust/functional.h>

#define CEIL(n,m) ((n)/(m) + (int)((n)%(m) !=0))
#define THREAD_CONF(grid, block, gridBound, blockBound) do {\
	    block.x = blockBound;\
	    grid.x = gridBound; \
		if (grid.x > 65535) {\
		   grid.x = (int)sqrt((double)grid.x);\
		   grid.y = CEIL(gridBound, grid.x); \
		}\
	}while (0)

using namespace MAPREDUCE_NS;

void mymap(int a, KeyValue * b, void * c){}
void myreduce(char *, int, char *, int, int *, KeyValue *, void *);
//int ncompare(char *, int, char *, int);
//void output(uint64_t, char *, int, char *, int, KeyValue *, void *);

struct Count {
	int n,limit,flag;
};

struct is_start
{
	__host__ __device__
	bool operator()(const int x)
	{
		return x==1;
	}
};

__global__ void mark(
		char 	*text,
		int 	*d_segmask,
		int 	length)
{
	const int tid_x = blockDim.x * blockIdx.x + threadIdx.x;
	const int tid_y = blockDim.y * blockIdx.y + threadIdx.y;

	const int tid = tid_y * (blockDim.x*gridDim.x) + tid_x;

	if(tid < length)
		d_segmask[tid] = 0;

	if(tid >= length-9)
		return;

	if(text[tid] == '<' &&
			text[tid+1] == 'a' &&
			text[tid+2] == ' ' &&
			text[tid+3] == 'h' &&
			text[tid+4] == 'r' &&
			text[tid+5] == 'e' &&
			text[tid+6] == 'f' &&
			text[tid+7] == '=' &&
			text[tid+8] == '\"')
	{
		d_segmask[tid+9] = 1;
	}
}

__global__ void compute_url_length(
		char 	*d_text,
		int		*d_urloffset,
		int		*d_urllength,
		int 	textlen,
		int		url_num)
{
	const int tid_x = blockDim.x * blockIdx.x + threadIdx.x;
	const int tid_y = blockDim.y * blockIdx.y + threadIdx.y;

	const int tid = tid_y * (blockDim.x*gridDim.x) + tid_x;

	if(tid >= url_num)
		return;

	int start = d_urloffset[tid];

	for(int i=start; i < textlen; i++)
	{
		if(d_text[i] == '\"' || i == textlen-1)
		{
			d_urllength[tid] = i-start;
			d_text[i] = '\0';
			return;
		}
	}
}

/* ---------------------------------------------------------------------- */

int main1(int argc, char **args)
{
	MPI_Init(&argc,&args);

	int me,nprocs;
	MPI_Comm_rank(MPI_COMM_WORLD, &me);
	MPI_Comm_size(MPI_COMM_WORLD, &nprocs);

	/*
	if (argc <= 1)
	{
		if (me == 0) printf("Syntax: invertedindex dir ...\n");
		MPI_Abort(MPI_COMM_WORLD,1);
	}*/

	MapReduce *mr = new MapReduce(MPI_COMM_WORLD);
	mr->verbosity = 2;
	mr->timer = 1;
	mr->set_fpath("/data/bzhaoad/mrmpi/temp");
	mr->memsize = 32;
	//mr->outofcore = 1;

	MPI_Barrier(MPI_COMM_WORLD);
	double tstart = MPI_Wtime();

	int mapitem = mr->map(4, mymap, NULL);
	int nfiles = mr->mapfilecount;

	//mr->collate(NULL);

	//int reduceitem = mr->reduce(myreduce,NULL);

	MPI_Barrier(MPI_COMM_WORLD);

	double tstop = MPI_Wtime();

	/*
	mr->sort_values(&ncompare);

	Count count;
	count.n = 0;
	count.limit = 10;
	count.flag = 0;
	mr->map(mr,output,&count);

	mr->gather(1);
	mr->sort_values(ncompare);

	count.n = 0;
	count.limit = 10;
	count.flag = 1;
	mr->map(mr,output,&count);
	*/

	delete mr;

	//printf("map and reduce item are %d, %d\n", mapitem, reduceitem);

	if (me == 0) {

		//printf("%d total words, %d unique words\n",nwords,nunique);
		printf("Time to process %d files on %d procs = %g (secs)\n",
				nfiles,nprocs,tstop-tstart);
	}

	MPI_Finalize();
}


int getfilename(char *fullpath, char *filename)
{
	size_t found;
	std::string path(fullpath);
	found=path.find_last_of("/\\");
	const char *name = path.substr(found+1).c_str();
	memcpy(filename, name, strlen(name)+1);

	return strlen(name);
}

/* ----------------------------------------------------------------------
   read a file
   for each word in file, emit key = word, value = NULL
------------------------------------------------------------------------- */

int main(int argc, char **args)
{
	MPI_Init(&argc,&args);

	int me,nprocs;
	MPI_Comm_rank(MPI_COMM_WORLD, &me);
	MPI_Comm_size(MPI_COMM_WORLD, &nprocs);

	cudaSetDevice(me%4);

	struct timeval	start_back, end_back;
	struct timeval  start1, end1;
	double timedif, timedif1;
	cudaDeviceSynchronize();
	gettimeofday(&start_back, NULL);

	
	int count = 0;

	char fullname[100];
	//int id = (me%4)*5 + i;
	//if(id<10)
		sprintf(fullname, "/data/bzhaoad/wikisplitmerge/007-000\0");
	//else
	//	sprintf(fullname, "/data/bzhaoad/wikisplitmerge/002-0%d\0", id);

	printf("full file name and gpu id is %s, %d\n", fullname, me%4);

	// filesize = # of bytes in file
	struct stat stbuf;
	int flag = stat(fullname,&stbuf);
	if (flag < 0) {
		printf("ERROR: Could not query file size\n");
		MPI_Abort(MPI_COMM_WORLD,1);
	}
	int filesize = stbuf.st_size;

	FILE *fp = fopen(fullname,"r");
	char *text = new char[filesize+1];
	int nchar = fread(text,1,filesize,fp);
	text[nchar] = '\0';
	fclose(fp);

	//MPI_Barrier(MPI_COMM_WORLD);
	//double tstart = MPI_Wtime();

	for(int i=0; i<5; i++)
	{
		/*
		int me, nprocs, localid, nodeid, fileid;
		MPI_Comm_rank(MPI_COMM_WORLD, &me);
		localid = me%4;

		int resultlen;
		char name[100];
		MPI_Get_processor_name(name, &resultlen);

		char filename[100];
		int namelen = getfilename(fullname, filename);

		sscanf(filename, "%d-%d", &nodeid, &fileid);

		if(fileid%4 != localid)
			return;

		cudaSetDevice(localid);
		*/


		//printf("task and file id is %d\t%d\n", itask, fileid);

		//copy text data into gpu memory
		char *d_text;
		cudaMalloc((void**)&d_text, (filesize+1)*sizeof(char));
		cudaMemcpy(d_text, text, (filesize+1)*sizeof(char), cudaMemcpyHostToDevice);

		//record the start position of each url
		int *d_sequence;
		int *d_segmask;

		cudaMalloc((void**)&d_sequence, (filesize+1)*sizeof(int));
		cudaMalloc((void**)&d_segmask, (filesize+1)*sizeof(int));

		thrust::device_ptr<int> dev_sequence(d_sequence);
		thrust::device_ptr<int> dev_segmask(d_segmask);

		thrust::sequence(dev_sequence, dev_sequence+(filesize+1));

		dim3 h_dimBlock(256,1,1);
		dim3 h_dimGrid(1,1,1);
		int numBlocks = CEIL(filesize+1, h_dimBlock.x);
		THREAD_CONF(h_dimGrid, h_dimBlock, numBlocks, h_dimBlock.x);

		//printf("zhao1, %d\n", me);

		//cudaEvent_t start, stop;
		//float time1;
		//cudaEventCreate(&start);
		//cudaEventCreate(&stop);
		//cudaEventRecord(start, 0);

		//record the position array (about 4ms for 64M)
		mark<<<h_dimGrid, h_dimBlock>>>(d_text, d_segmask, (filesize+1));

		//cudaEventRecord(stop, 0);
		//cudaEventSynchronize(stop);
		//cudaEventElapsedTime(&time1, start, stop);
		//printf("time is %f\n", time1);

		//printf("zhao2 %d\n", me);

		int urlcount =	thrust::count(dev_segmask, dev_segmask+(filesize+1), 1);

		//if(urlcount == 0)
		//	return;

		//printf("urlcount is %d\n", urlcount);

		int *d_urloffset;
		int *d_urllength;

		cudaMalloc((void**)&d_urloffset, urlcount*sizeof(int));
		cudaMalloc((void**)&d_urllength, urlcount*sizeof(int));

		thrust::device_ptr<int> dev_urloffset(d_urloffset);

		//about 14ms
		thrust::copy_if(dev_sequence, dev_sequence+(filesize+1),
				dev_segmask, dev_urloffset, is_start());

		dim3 h_dimGrid2(1,1,1);
		dim3 h_dimBlock2(256,1,1);
		numBlocks = CEIL(urlcount, h_dimBlock2.x);
		THREAD_CONF(h_dimGrid2, h_dimBlock2, numBlocks, h_dimBlock2.x);

		//printf("zhao3 %d\n", me);

		//about 8ms
		compute_url_length<<<h_dimGrid2, h_dimBlock2>>>(
				d_text,
				d_urloffset,
				d_urllength,
				(filesize+1),
				urlcount);

		int *h_urloffset = new int[urlcount];
		int *h_urllength = new int[urlcount];

		//cudaMemcpy(text, d_text, (filesize+1)*sizeof(char), cudaMemcpyDeviceToHost);
		cudaMemcpy(h_urloffset, d_urloffset, urlcount*sizeof(int), cudaMemcpyDeviceToHost);
		cudaMemcpy(h_urllength, d_urllength, urlcount*sizeof(int), cudaMemcpyDeviceToHost);

		//printf("zhao4 %d\n", me);

		//about 18ms for 64m ii data
		for(int i=0; i<urlcount; i++)
		{
		//	kv->add(text+h_urloffset[i], h_urllength[i]+1, "file1", 6);
			count++;
		}

		//printf("zhao5 %d\n", me);

		//free device memory
		cudaFree(d_text);
		cudaFree(d_sequence);
		cudaFree(d_segmask);
		cudaFree(d_urloffset);

		//printf("zhao6 %d\n", me);

		//delete [] text;
		delete [] h_urloffset;
		delete [] h_urllength;

		//printf("zhao7 %d\n", me);

		cudaError_t err = cudaGetLastError();
		if(err != cudaSuccess)
		{
			printf("cudaerror %d\n", err);
		}

	}

	//printf("zhao8 %d\n", me);
	delete [] text;

	cudaDeviceSynchronize();
	gettimeofday(&end_back, NULL);
	timedif = (1000*(end_back.tv_sec-start_back.tv_sec)
			+(end_back.tv_usec-start_back.tv_usec + 0.0)/1000);
	printf("time of %d is %f, %d\n", me, timedif, count);


	/*
	MPI_Barrier(MPI_COMM_WORLD);
	double tstop = MPI_Wtime();
	if(me == 0)
		printf("Time is %g (secs)\n", tstop-tstart);
	*/

	MPI_Finalize();
}

/* ----------------------------------------------------------------------
   count word occurrence
   emit key = word, value = # of multi-values
------------------------------------------------------------------------- */

void myreduce(char *key, int keybytes, char *multivalue,
		int nvalues, int *valuebytes, KeyValue *kv, void *ptr)
{
	kv->add(key,keybytes,(char *) &nvalues,sizeof(int));
}

/* ----------------------------------------------------------------------
   compare two counts
   order values by count, largest first
------------------------------------------------------------------------- */

int ncompare(char *p1, int len1, char *p2, int len2)
{
	int i1 = *(int *) p1;
	int i2 = *(int *) p2;
	if (i1 > i2) return -1;
	else if (i1 < i2) return 1;
	else return 0;
}

/* ----------------------------------------------------------------------
   process a word and its count
   depending on flag, emit KV or print it, up to limit
------------------------------------------------------------------------- */

void output(uint64_t itask, char *key, int keybytes, char *value,
		int valuebytes, KeyValue *kv, void *ptr)
{
	Count *count = (Count *) ptr;
	count->n++;
	if (count->n > count->limit) return;

	int n = *(int *) value;
	if (count->flag)
		printf("%d %s\n",n,key);
	else
		kv->add(key,keybytes,(char *) &n,sizeof(int));
}

